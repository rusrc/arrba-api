// <auto-generated />
using System;
using Arrba.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Arrba.Domain.Migrations
{
    [DbContext(typeof(DbArrbaContext))]
    [Migration("20190326160709_CommentLength6000")]
    partial class CommentLength6000
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Arrba.Domain.Models.AdVehicle", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdStatus");

                    b.Property<DateTime>("AddDate");

                    b.Property<long>("BrandID");

                    b.Property<long>("CategID");

                    b.Property<long>("CityID");

                    b.Property<string>("Comment")
                        .HasMaxLength(6000);

                    b.Property<int>("CommentRestriction");

                    b.Property<int>("Condition");

                    b.Property<long>("CountryID");

                    b.Property<long>("CurrencyID");

                    b.Property<bool>("CustomsCleared");

                    b.Property<DateTime>("DateExpired");

                    b.Property<long?>("DealershipId");

                    b.Property<string>("Description")
                        .HasMaxLength(2048);

                    b.Property<bool>("ExchangePossible");

                    b.Property<string>("FolderImgName")
                        .HasMaxLength(32);

                    b.Property<bool>("HotSelling");

                    b.Property<bool>("ImgExists");

                    b.Property<string>("ImgJson");

                    b.Property<bool>("InstalmentSelling");

                    b.Property<int>("IsAutoUpdatable");

                    b.Property<DateTime?>("LastModified");

                    b.Property<string>("MapJsonCoord");

                    b.Property<double?>("MinimalPrice");

                    b.Property<long?>("ModelID");

                    b.Property<int>("ModelVerification");

                    b.Property<int>("ModirationStatus");

                    b.Property<string>("NewModelName")
                        .HasMaxLength(100);

                    b.Property<double>("Price");

                    b.Property<long?>("RegionID");

                    b.Property<long>("SuperCategID");

                    b.Property<string>("Title")
                        .HasMaxLength(1024);

                    b.Property<long>("TypeID");

                    b.Property<long>("UserID");

                    b.Property<long>("ViewCount");

                    b.Property<string>("Year")
                        .HasMaxLength(4);

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategID");

                    b.HasIndex("CityID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("DealershipId");

                    b.HasIndex("ModelID");

                    b.HasIndex("RegionID");

                    b.HasIndex("SuperCategID");

                    b.HasIndex("TypeID");

                    b.HasIndex("UserID");

                    b.ToTable("AdVehicles");
                });

            modelBuilder.Entity("Arrba.Domain.Models.AdVehicleServiceStore", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveStatus");

                    b.Property<long>("AdVehicleID");

                    b.Property<DateTime?>("BoughtDate");

                    b.Property<DateTime?>("LastDate");

                    b.Property<string>("MetaData");

                    b.Property<string>("Name");

                    b.Property<string>("NameMultiLangJson");

                    b.Property<int>("ServiceType");

                    b.HasKey("ID");

                    b.HasIndex("AdVehicleID");

                    b.ToTable("AdVehicleServiceStores");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Balance", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("LastAddDate");

                    b.HasKey("UserID");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Arrba.Domain.Models.BalanceTransaction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("BalanceTransactionType");

                    b.Property<long>("BalanceUserID");

                    b.Property<long>("CurrencyID");

                    b.Property<DateTime>("DateTransaction");

                    b.Property<long>("PaymentSourceID");

                    b.HasKey("ID");

                    b.HasIndex("BalanceUserID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("BalanceTransactions");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Brand", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("LikeCount");

                    b.Property<long>("LikeValue");

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<int>("Status");

                    b.Property<int>("WatchWeightStatus");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CategBrand", b =>
                {
                    b.Property<long>("CategID");

                    b.Property<long>("BrandID");

                    b.HasKey("CategID", "BrandID");

                    b.HasIndex("BrandID");

                    b.ToTable("CategBrands");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CategGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("CategGroups");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CategType", b =>
                {
                    b.Property<long>("CategID");

                    b.Property<long>("ItemTypeID");

                    b.HasKey("CategID", "ItemTypeID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("CategTypes");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Category", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<long>("CategGroupID");

                    b.Property<string>("FileName");

                    b.Property<bool>("HideModelField");

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<string>("NameMultiLangJson");

                    b.Property<string>("NameMultiLangSingularJson");

                    b.Property<int>("Status");

                    b.Property<long>("SuperCategID");

                    b.HasKey("ID");

                    b.HasIndex("CategGroupID");

                    b.HasIndex("SuperCategID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CheckBoxGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NameMultiLangJson");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CheckBoxGroups");
                });

            modelBuilder.Entity("Arrba.Domain.Models.City", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<long>("CountryID");

                    b.Property<string>("Name");

                    b.Property<string>("NameMultiLangJson");

                    b.Property<long>("RegionID");

                    b.Property<long>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Comment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdVehicleID");

                    b.Property<int?>("ClaimCount");

                    b.Property<long?>("CommentParentID");

                    b.Property<DateTime>("Date");

                    b.Property<long>("ForUserID");

                    b.Property<long?>("OfferAdID");

                    b.Property<string>("Text")
                        .HasMaxLength(2048);

                    b.Property<long>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CommentParentID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Country", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveStatus");

                    b.Property<string>("Alias");

                    b.Property<string>("FirstDomainName")
                        .HasMaxLength(6);

                    b.Property<string>("Name");

                    b.Property<string>("NameMultiLangJson");

                    b.Property<int>("UseNativeCurrencyOnly");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Currency", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<long>("CountryID");

                    b.Property<string>("FullName");

                    b.Property<string>("Name")
                        .HasMaxLength(3);

                    b.Property<string>("Symbol")
                        .HasMaxLength(3);

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CurrencyRate", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CurrencyBaseRateID");

                    b.Property<long?>("CurrencyBaseRateID1");

                    b.Property<long>("CurrencyID");

                    b.Property<int>("FaceValue");

                    b.Property<float>("Rate");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyBaseRateID");

                    b.HasIndex("CurrencyBaseRateID1");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Dealership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long>("CityId");

                    b.Property<string>("Email");

                    b.Property<string>("FrWorkTime")
                        .HasMaxLength(15);

                    b.Property<string>("MapCoords");

                    b.Property<string>("MoWorkTime")
                        .HasMaxLength(15);

                    b.Property<string>("Name");

                    b.Property<bool>("OfficialDealer");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SaWorkTime")
                        .HasMaxLength(15);

                    b.Property<string>("SuWorkTime")
                        .HasMaxLength(15);

                    b.Property<string>("SubwayStations");

                    b.Property<string>("ThWorkTime")
                        .HasMaxLength(15);

                    b.Property<string>("TuWorkTime")
                        .HasMaxLength(15);

                    b.Property<long>("UserId");

                    b.Property<string>("WeWorkTime")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Dealerships");
                });

            modelBuilder.Entity("Arrba.Domain.Models.DynamicPropertyAdVehicle", b =>
                {
                    b.Property<long>("AdVehicleID");

                    b.Property<long>("PropertyID");

                    b.Property<string>("PropertyValue")
                        .HasMaxLength(14);

                    b.HasKey("AdVehicleID", "PropertyID");

                    b.HasIndex("PropertyID");

                    b.ToTable("DynamicPropertyAdVehicles");
                });

            modelBuilder.Entity("Arrba.Domain.Models.FeedBack", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("ID");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Arrba.Domain.Models.ItemModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BrandID");

                    b.Property<long>("CategID");

                    b.Property<long>("ItemTypeID");

                    b.Property<long>("LikeCount");

                    b.Property<long>("LikeValue");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<int>("WatchWeightStatus");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("Arrba.Domain.Models.ItemType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NameMultiLangJson");

                    b.Property<int>("Status");

                    b.Property<int>("WatchWeightStatus");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Property", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveStatus");

                    b.Property<int>("ControlType");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NameMultiLangJson");

                    b.Property<long>("PropertyGroupID");

                    b.Property<string>("UnitMeasure")
                        .HasMaxLength(6);

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PropertyGroupID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Arrba.Domain.Models.PropertyCateg", b =>
                {
                    b.Property<long>("PropertyID");

                    b.Property<long>("CategID");

                    b.Property<int>("AddToCard");

                    b.Property<int>("AddToFilter");

                    b.Property<long>("Priority");

                    b.HasKey("PropertyID", "CategID");

                    b.HasIndex("CategID");

                    b.ToTable("PropertyCategs");
                });

            modelBuilder.Entity("Arrba.Domain.Models.PropertyCheckBoxGroup", b =>
                {
                    b.Property<long>("PropertyID");

                    b.Property<long>("CheckBoxGroupID");

                    b.HasKey("PropertyID", "CheckBoxGroupID");

                    b.HasIndex("CheckBoxGroupID");

                    b.ToTable("PropertyCheckBoxGroups");
                });

            modelBuilder.Entity("Arrba.Domain.Models.PropertyGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("NameMultiLangJson");

                    b.HasKey("ID");

                    b.ToTable("PropertyGroups");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Region", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<long>("CountryID");

                    b.Property<string>("Name");

                    b.Property<string>("NameMultiLangJson");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Arrba.Domain.Models.SelectOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MetaDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NameMultiLangJson");

                    b.Property<long>("PropertyID");

                    b.HasKey("ID");

                    b.HasIndex("PropertyID");

                    b.ToTable("SelectOptions");
                });

            modelBuilder.Entity("Arrba.Domain.Models.ServicePrice", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Price");

                    b.Property<int>("ServiceType");

                    b.Property<string>("SevicePriceName")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("SevicePriceName")
                        .IsUnique();

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("Arrba.Domain.Models.SuperCategory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .HasMaxLength(180);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NameMultiLangJson");

                    b.Property<int>("Order");

                    b.Property<int>("Status");

                    b.Property<int>("SuperCategType");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SuperCategories");
                });

            modelBuilder.Entity("Arrba.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarImgName")
                        .HasMaxLength(35);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserLastName");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserNickName");

                    b.Property<int>("UserStatus");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ac88e11-e377-4a49-bef9-ed7767ff6f9d",
                            Email = "admin@mail.ru",
                            EmailConfirmed = false,
                            LastLogin = new DateTime(2019, 3, 26, 19, 7, 9, 251, DateTimeKind.Local).AddTicks(6890),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.RU",
                            NormalizedUserName = "ADMIN@MAIL.RU",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7vpzNBUIMLvB4bdfb8xX5IIsMZ86GfG1In4YX3q8BYyZoFQYSGuVOVWB3XfCdZOA==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2019, 3, 26, 19, 7, 9, 250, DateTimeKind.Local).AddTicks(3818),
                            SecurityStamp = "6FPVSOIY6BCPOQH4BZUCNYIKQ5WB4VRM",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.ru",
                            UserNickName = "admin@mail.ru",
                            UserStatus = 0
                        });
                });

            modelBuilder.Entity("Arrba.Domain.Models.UserPhone", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number")
                        .HasMaxLength(16);

                    b.Property<int>("PriorityStatus");

                    b.Property<int>("Status");

                    b.Property<long>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Arrba.Domain.Models.AdVehicle", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Category", "Categ")
                        .WithMany("AdVehicles")
                        .HasForeignKey("CategID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.City", "City")
                        .WithMany("Vehicles")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Currency", "Currency")
                        .WithMany("Ads")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Dealership", "Dealership")
                        .WithMany("Vehicles")
                        .HasForeignKey("DealershipId");

                    b.HasOne("Arrba.Domain.Models.ItemModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelID");

                    b.HasOne("Arrba.Domain.Models.Region", "Region")
                        .WithMany("AdVehicles")
                        .HasForeignKey("RegionID");

                    b.HasOne("Arrba.Domain.Models.SuperCategory", "SuperCateg")
                        .WithMany("AdVehicles")
                        .HasForeignKey("SuperCategID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.ItemType", "Type")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.User", "User")
                        .WithMany("Ads")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.AdVehicleServiceStore", b =>
                {
                    b.HasOne("Arrba.Domain.Models.AdVehicle", "AdVehicle")
                        .WithMany("Services")
                        .HasForeignKey("AdVehicleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.Balance", b =>
                {
                    b.HasOne("Arrba.Domain.Models.User", "User")
                        .WithOne("Balance")
                        .HasForeignKey("Arrba.Domain.Models.Balance", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.BalanceTransaction", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Balance", "Balance")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("BalanceUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Currency", "Currency")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.CategBrand", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Brand", "Brand")
                        .WithMany("CategBrands")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Category", "Categ")
                        .WithMany("CategBrands")
                        .HasForeignKey("CategID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.CategType", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Category", "Categ")
                        .WithMany("CategTypes")
                        .HasForeignKey("CategID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.ItemType", "ItemType")
                        .WithMany("CatigTypes")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.Category", b =>
                {
                    b.HasOne("Arrba.Domain.Models.CategGroup", "CategGroup")
                        .WithMany("Categs")
                        .HasForeignKey("CategGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.SuperCategory", "SuperCateg")
                        .WithMany("Categories")
                        .HasForeignKey("SuperCategID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.City", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.Comment", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Comment", "CommentParent")
                        .WithMany("CommentParents")
                        .HasForeignKey("CommentParentID");
                });

            modelBuilder.Entity("Arrba.Domain.Models.CurrencyRate", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyBaseRateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Currency", "CurrencyBaseRate")
                        .WithMany("CurrencyBaseRates")
                        .HasForeignKey("CurrencyBaseRateID1");
                });

            modelBuilder.Entity("Arrba.Domain.Models.Dealership", b =>
                {
                    b.HasOne("Arrba.Domain.Models.City", "City")
                        .WithMany("Dealerships")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.User", "User")
                        .WithMany("Dealerships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.DynamicPropertyAdVehicle", b =>
                {
                    b.HasOne("Arrba.Domain.Models.AdVehicle", "AdVehicle")
                        .WithMany("DynamicPropertyAds")
                        .HasForeignKey("AdVehicleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Property", "Property")
                        .WithMany("DynamicPropertyAds")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.ItemModel", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Brand", "Brand")
                        .WithMany("ItemModels")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Category", "Categ")
                        .WithMany("Models")
                        .HasForeignKey("CategID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.ItemType", "ItemType")
                        .WithMany("ItemModels")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.Property", b =>
                {
                    b.HasOne("Arrba.Domain.Models.PropertyGroup", "PropertyGroup")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.PropertyCateg", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Category", "Categ")
                        .WithMany("PropertyCategs")
                        .HasForeignKey("CategID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Property", "Property")
                        .WithMany("PropertyCatigs")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.PropertyCheckBoxGroup", b =>
                {
                    b.HasOne("Arrba.Domain.Models.CheckBoxGroup", "CheckBoxGroup")
                        .WithMany("PropertyCheckBoxGroups")
                        .HasForeignKey("CheckBoxGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.Property", "Property")
                        .WithMany("PropertyCheckBoxGroups")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.Region", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.SelectOption", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Property", "Property")
                        .WithMany("SelectOptions")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arrba.Domain.Models.UserPhone", b =>
                {
                    b.HasOne("Arrba.Domain.Models.User", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Arrba.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Arrba.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Arrba.Domain.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arrba.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Arrba.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
